
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  **
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can Override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject
'    Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.3.0.3)

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public MustInherit Class _Tblparty_master
	Inherits SqlClientEntity

		Public Sub New() 
			Me.QuerySource = "Tblparty_master"
			Me.MappingName = "Tblparty_master"
		End Sub

	'=================================================================
	'  Public Overrides Sub AddNew()
	'=================================================================
	'
	'=================================================================
	Public Overrides Sub AddNew()
		MyBase.AddNew()
				
	End Sub
	
	Public Overrides Sub FlushData()
		Me._whereClause = nothing
		Me._aggregateClause = nothing		
		MyBase.FlushData()
	End Sub
	
		
	'=================================================================
	'  	Public Function LoadAll() As Boolean
	'=================================================================
	'  Loads all of the records in the database, and sets the currentRow to the first row
	'=================================================================
	Public Function LoadAll() As Boolean
	
		Dim parameters As ListDictionary = Nothing
		
		
    	Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_Tblparty_masterLoadAll]", parameters)
		
	End Function

	'=================================================================
	' Public Overridable Function LoadByPrimaryKey()  As Boolean
	'=================================================================
	'  Loads a single row of via the primary key
	'=================================================================
	Public Overridable Function LoadByPrimaryKey() As Boolean

		Dim parameters As ListDictionary = New ListDictionary()
				
		Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_Tblparty_masterLoadByPrimaryKey]", parameters)

	End Function

	#Region "Parameters"
	Protected class Parameters 
		
		Public Shared ReadOnly Property Id As SqlParameter
			Get
				Return New SqlParameter("@Id", SqlDbType.Int, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Name As SqlParameter
			Get
				Return New SqlParameter("@Name", SqlDbType.VarChar, 50)
			End Get
		End Property
		
		Public Shared ReadOnly Property Description As SqlParameter
			Get
				Return New SqlParameter("@Description", SqlDbType.VarChar, 600)
			End Get
		End Property
		
		Public Shared ReadOnly Property Mobile_no As SqlParameter
			Get
				Return New SqlParameter("@Mobile_no", SqlDbType.VarChar, 50)
			End Get
		End Property
		
	End Class
	#End Region	

	#Region "ColumnNames"
	Public class ColumnNames
		
        Public Const Id As String = "id"
        Public Const Name As String = "name"
        Public Const Description As String = "description"
        Public Const Mobile_no As String = "mobile_no"

		Shared Public Function ToPropertyName(ByVal columnName As String) As String

			If ht Is Nothing Then
			
				ht = new Hashtable
				
				ht(Id) = _Tblparty_master.PropertyNames.Id
				ht(Name) = _Tblparty_master.PropertyNames.Name
				ht(Description) = _Tblparty_master.PropertyNames.Description
				ht(Mobile_no) = _Tblparty_master.PropertyNames.Mobile_no

			End If
			
			Return CType(ht(columnName), String)
			
		End Function
		
		Shared Private ht  As Hashtable = Nothing		 
	End Class
	#End Region	
	
	#Region "PropertyNames"
	Public class PropertyNames
		
        Public Const Id As String = "Id"
        Public Const Name As String = "Name"
        Public Const Description As String = "Description"
        Public Const Mobile_no As String = "Mobile_no"

		Shared Public Function ToColumnName(ByVal propertyName As String) As String

			If ht Is Nothing Then
			
				ht = new Hashtable
				
				ht(Id) = _Tblparty_master.ColumnNames.Id
				ht(Name) = _Tblparty_master.ColumnNames.Name
				ht(Description) = _Tblparty_master.ColumnNames.Description
				ht(Mobile_no) = _Tblparty_master.ColumnNames.Mobile_no

			End If
			
			Return CType(ht(propertyName), String)
			
		End Function
		
		Shared Private ht  As Hashtable = Nothing
		
	End Class
	#End Region	
	
	#Region "StringPropertyNames"
	Public class StringPropertyNames
		
        Public Const Id As String = "s_Id"
        Public Const Name As String = "s_Name"
        Public Const Description As String = "s_Description"
        Public Const Mobile_no As String = "s_Mobile_no"

	End Class
	#End Region		
	
	#Region "Properties" 
		Public Overridable Property Id As Integer
			Get
				Return MyBase.GetInteger(ColumnNames.Id)
			End Get
			Set(ByVal Value As Integer)
				MyBase.SetInteger(ColumnNames.Id, Value)
			End Set
		End Property

		Public Overridable Property Name As String
			Get
				Return MyBase.GetString(ColumnNames.Name)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.Name, Value)
			End Set
		End Property

		Public Overridable Property Description As String
			Get
				Return MyBase.GetString(ColumnNames.Description)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.Description, Value)
			End Set
		End Property

		Public Overridable Property Mobile_no As String
			Get
				Return MyBase.GetString(ColumnNames.Mobile_no)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.Mobile_no, Value)
			End Set
		End Property


	#End Region  
	
	#Region "String Properties" 

		Public Overridable Property s_Id As String
			Get
				If Me.IsColumnNull(ColumnNames.Id) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(ColumnNames.Id)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Id)
				Else
					Me.Id = MyBase.SetIntegerAsString(ColumnNames.Id, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Name As String
			Get
				If Me.IsColumnNull(ColumnNames.Name) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.Name)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Name)
				Else
					Me.Name = MyBase.SetStringAsString(ColumnNames.Name, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Description As String
			Get
				If Me.IsColumnNull(ColumnNames.Description) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.Description)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Description)
				Else
					Me.Description = MyBase.SetStringAsString(ColumnNames.Description, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Mobile_no As String
			Get
				If Me.IsColumnNull(ColumnNames.Mobile_no) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.Mobile_no)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Mobile_no)
				Else
					Me.Mobile_no = MyBase.SetStringAsString(ColumnNames.Mobile_no, Value)
				End If
			End Set
		End Property


	#End Region  	

	#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffWhereParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffWhereParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region "TearOff's"
		Public class TearOffWhereParameter

			Public Sub New(ByVal clause As WhereClause)
				Me._clause = clause
			End Sub
		
	
			Public ReadOnly Property Id() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Id, Parameters.Id)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Name() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Name, Parameters.Name)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Description() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Description, Parameters.Description)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Mobile_no() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Mobile_no, Parameters.Mobile_no)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property


			Private _clause as WhereClause
		End Class
		#End Region	

		Public ReadOnly Property Id() As WhereParameter 
			Get
				If _Id_W Is Nothing Then
					_Id_W = TearOff.Id
				End If
				Return _Id_W
			End Get
		End Property

		Public ReadOnly Property Name() As WhereParameter 
			Get
				If _Name_W Is Nothing Then
					_Name_W = TearOff.Name
				End If
				Return _Name_W
			End Get
		End Property

		Public ReadOnly Property Description() As WhereParameter 
			Get
				If _Description_W Is Nothing Then
					_Description_W = TearOff.Description
				End If
				Return _Description_W
			End Get
		End Property

		Public ReadOnly Property Mobile_no() As WhereParameter 
			Get
				If _Mobile_no_W Is Nothing Then
					_Mobile_no_W = TearOff.Mobile_no
				End If
				Return _Mobile_no_W
			End Get
		End Property

		Private _Id_W As WhereParameter = Nothing
		Private _Name_W As WhereParameter = Nothing
		Private _Description_W As WhereParameter = Nothing
		Private _Mobile_no_W As WhereParameter = Nothing

			Public Sub WhereClauseReset()

			_Id_W = Nothing
			_Name_W = Nothing
			_Description_W = Nothing
			_Mobile_no_W = Nothing
				Me._entity.Query.FlushWhereParameters()

			End Sub
	
		Private _entity As BusinessEntity
		Private _tearOff As TearOffWhereParameter
    End Class	

	Public ReadOnly Property Where() As WhereClause
		Get
			If _whereClause Is Nothing Then
				_whereClause = New WhereClause(Me)
			End If
	
			Return _whereClause
		End Get
	End Property
	
	Private _whereClause As WhereClause = Nothing	
#End Region	

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffAggregateParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffAggregateParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region "AggregateParameter TearOff's"
		Public class TearOffAggregateParameter

			Public Sub New(ByVal clause As AggregateClause)
				Me._clause = clause
			End Sub
		
	
		Public ReadOnly Property Id() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Id, Parameters.Id)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Name() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Name, Parameters.Name)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Description() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Description, Parameters.Description)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Mobile_no() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Mobile_no, Parameters.Mobile_no)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property


			Private _clause as AggregateClause
		End Class
		#End Region	

		Public ReadOnly Property Id() As AggregateParameter 
			Get
				If _Id_W Is Nothing Then
					_Id_W = TearOff.Id
				End If
				Return _Id_W
			End Get
		End Property

		Public ReadOnly Property Name() As AggregateParameter 
			Get
				If _Name_W Is Nothing Then
					_Name_W = TearOff.Name
				End If
				Return _Name_W
			End Get
		End Property

		Public ReadOnly Property Description() As AggregateParameter 
			Get
				If _Description_W Is Nothing Then
					_Description_W = TearOff.Description
				End If
				Return _Description_W
			End Get
		End Property

		Public ReadOnly Property Mobile_no() As AggregateParameter 
			Get
				If _Mobile_no_W Is Nothing Then
					_Mobile_no_W = TearOff.Mobile_no
				End If
				Return _Mobile_no_W
			End Get
		End Property

		Private _Id_W As AggregateParameter = Nothing
		Private _Name_W As AggregateParameter = Nothing
		Private _Description_W As AggregateParameter = Nothing
		Private _Mobile_no_W As AggregateParameter = Nothing

		Public Sub AggregateClauseReset()

		_Id_W = Nothing
		_Name_W = Nothing
		_Description_W = Nothing
		_Mobile_no_W = Nothing
			Me._entity.Query.FlushAggregateParameters()

		End Sub
	
		Private _entity As BusinessEntity
		Private _tearOff As TearOffAggregateParameter
    End Class	

	Public ReadOnly Property Aggregate() As AggregateClause
		Get
			If _aggregateClause Is Nothing Then
				_aggregateClause = New AggregateClause(Me)
			End If
	
			Return _aggregateClause
		End Get
	End Property
	
	Private _aggregateClause As AggregateClause = Nothing	
#End Region	

	Protected Overrides Function GetInsertCommand() As IDbCommand
	
		Dim cmd As SqlCommand = New SqlCommand
		cmd.CommandType = CommandType.StoredProcedure
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_Tblparty_masterInsert]" 
	    
		CreateParameters(cmd)
		    
		Return cmd 

  	End Function
	
	Protected Overrides Function GetUpdateCommand() As IDbCommand
	
		Dim cmd As SqlCommand = New SqlCommand
		cmd.CommandType = CommandType.StoredProcedure    
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_Tblparty_masterUpdate]" 
		
		CreateParameters(cmd) 
		    
		Return cmd
	
	End Function	
	
	Protected Overrides Function GetDeleteCommand() As IDbCommand
	
		Dim cmd As SqlCommand = New SqlCommand
		cmd.CommandType = CommandType.StoredProcedure    
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_Tblparty_masterDelete]" 
		
		Dim p As SqlParameter
  
		Return cmd
	
	End Function	
	
	Private Sub CreateParameters(ByVal cmd As SqlCommand)
	
		Dim p As SqlParameter
		p = cmd.Parameters.Add(Parameters.Id)
		p.SourceColumn = ColumnNames.Id
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Name)
		p.SourceColumn = ColumnNames.Name
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Description)
		p.SourceColumn = ColumnNames.Description
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Mobile_no)
		p.SourceColumn = ColumnNames.Mobile_no
		p.SourceVersion = DataRowVersion.Current


	End Sub	

End Class

